//SPDX-License-Identifier: Unlicense
pragma solidity ^0.5.17;

contract StatesContract {
    enum StateType {StateA, StateB}

    StateType current;
    uint last_input;
    mapping(address => uint256) winners;
 
    constructor(uint128 _maxSize) {
        current = StateType.StateA;
        last_input = -1;
    }

    function move(uint256 code) public returns(uint256){
        last_input = code;
        if(code == 85 || code == 104){
            current = StateType.StateB;
        }else{
            current = StateType.StateA;
        }
        return (code);
    }

    function tryAgain(uint256 code) public returns(bool){
        require(current == StateType.StateB);
        last_input = code;
        return (code == 104);
    }

    function win() public returns(uint256){
        require(current == StateType.StateB);
        require(last_input == 104);
        winners[msg.sender] = 1000000;
        return(1000000);
    }

    function move_precondition() public view returns(bool){
        return (true);
    }
    function tryAgain_precondition() public view returns(bool){
        return (current == StateType.StateB);
    }
    function win_precondition() public view returns(bool){
        return (current == StateType.StateB && last_input == 104);
    } 

}
